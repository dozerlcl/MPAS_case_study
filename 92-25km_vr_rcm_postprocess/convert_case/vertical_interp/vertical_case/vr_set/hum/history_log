netcdf history.1998-04-01_00.00.00 {
dimensions:
	nVertLevels = 55 ;
	nCells = 163842 ;
	Time = UNLIMITED ; // (1 currently)
	nEdges = 491520 ;
	nVertices = 327680 ;
	TWO = 2 ;
	maxEdges = 10 ;
	maxEdges2 = 20 ;
	vertexDegree = 3 ;
	nVertLevelsP1 = 56 ;
	StrLen = 64 ;
	nOznLevels = 59 ;
	nMonths = 12 ;
	nSoilLevels = 4 ;
variables:
	double qv(Time, nCells, nVertLevels) ;
		qv:long_name = "Water vapor mixing ratio" ;
		qv:units = "kg kg^{-1}" ;
	double qc(Time, nCells, nVertLevels) ;
		qc:long_name = "Cloud water mixing ratio" ;
		qc:units = "kg kg^{-1}" ;
	double qr(Time, nCells, nVertLevels) ;
		qr:long_name = "Rain water mixing ratio" ;
		qr:units = "kg kg^{-1}" ;
	double qi(Time, nCells, nVertLevels) ;
		qi:long_name = "Ice mixing ratio" ;
		qi:units = "kg kg^{-1}" ;
	double qs(Time, nCells, nVertLevels) ;
		qs:long_name = "Snow mixing ratio" ;
		qs:units = "kg kg^{-1}" ;
	double qg(Time, nCells, nVertLevels) ;
		qg:long_name = "Graupel mixing ratio" ;
		qg:units = "kg kg^{-1}" ;
	double latCell(nCells) ;
		latCell:units = "rad" ;
		latCell:long_name = "Latitude of cells" ;
	double lonCell(nCells) ;
		lonCell:units = "rad" ;
		lonCell:long_name = "Longitude of cells" ;
	double xCell(nCells) ;
		xCell:units = "m" ;
		xCell:long_name = "Cartesian x-coordinate of cells" ;
	double yCell(nCells) ;
		yCell:units = "m" ;
		yCell:long_name = "Cartesian y-coordinate of cells" ;
	double zCell(nCells) ;
		zCell:units = "m" ;
		zCell:long_name = "Cartesian z-coordinate of cells" ;
	int indexToCellID(nCells) ;
		indexToCellID:units = "-" ;
		indexToCellID:long_name = "Mapping from local array index to global cell ID" ;
	double latEdge(nEdges) ;
		latEdge:units = "rad" ;
		latEdge:long_name = "Latitude of edges" ;
	double lonEdge(nEdges) ;
		lonEdge:units = "rad" ;
		lonEdge:long_name = "Longitude of edges" ;
	double xEdge(nEdges) ;
		xEdge:units = "m" ;
		xEdge:long_name = "Cartesian x-coordinate of edges" ;
	double yEdge(nEdges) ;
		yEdge:units = "m" ;
		yEdge:long_name = "Cartesian y-coordinate of edges" ;
	double zEdge(nEdges) ;
		zEdge:units = "m" ;
		zEdge:long_name = "Cartesian z-coordinate of edges" ;
	int indexToEdgeID(nEdges) ;
		indexToEdgeID:units = "-" ;
		indexToEdgeID:long_name = "Mapping from local array index to global edge ID" ;
	double latVertex(nVertices) ;
		latVertex:units = "rad" ;
		latVertex:long_name = "Latitude of vertices" ;
	double lonVertex(nVertices) ;
		lonVertex:units = "rad" ;
		lonVertex:long_name = "Longitude of vertices" ;
	double xVertex(nVertices) ;
		xVertex:units = "m" ;
		xVertex:long_name = "Cartesian x-coordinate of vertices" ;
	double yVertex(nVertices) ;
		yVertex:units = "m" ;
		yVertex:long_name = "Cartesian y-coordinate of vertices" ;
	double zVertex(nVertices) ;
		zVertex:units = "m" ;
		zVertex:long_name = "Cartesian z-coordinate of vertices" ;
	int indexToVertexID(nVertices) ;
		indexToVertexID:units = "-" ;
		indexToVertexID:long_name = "Mapping from local array index to global vertex ID" ;
	int cellsOnEdge(nEdges, TWO) ;
		cellsOnEdge:units = "-" ;
		cellsOnEdge:long_name = "IDs of cells divided by an edge" ;
	int nEdgesOnCell(nCells) ;
		nEdgesOnCell:units = "-" ;
		nEdgesOnCell:long_name = "Number of edges forming the boundary of a cell" ;
	int nEdgesOnEdge(nEdges) ;
		nEdgesOnEdge:units = "-" ;
		nEdgesOnEdge:long_name = "Number of edges involved in reconstruction of tangential velocity for an edge" ;
	int edgesOnCell(nCells, maxEdges) ;
		edgesOnCell:units = "-" ;
		edgesOnCell:long_name = "IDs of edges forming the boundary of a cell" ;
	int edgesOnEdge(nEdges, maxEdges2) ;
		edgesOnEdge:units = "-" ;
		edgesOnEdge:long_name = "IDs of edges involved in reconstruction of tangential velocity for an edge" ;
	double weightsOnEdge(nEdges, maxEdges2) ;
		weightsOnEdge:units = "-" ;
		weightsOnEdge:long_name = "Weights used in reconstruction of tangential velocity for an edge" ;
	double dvEdge(nEdges) ;
		dvEdge:units = "-" ;
		dvEdge:long_name = "Spherical distance between vertex endpoints of an edge" ;
	double dcEdge(nEdges) ;
		dcEdge:units = "m" ;
		dcEdge:long_name = "Spherical distance between cells separated by an edge" ;
	double angleEdge(nEdges) ;
		angleEdge:units = "rad" ;
		angleEdge:long_name = "Angle between local north and the positive tangential direction of an edge" ;
	double areaCell(nCells) ;
		areaCell:units = "m^2" ;
		areaCell:long_name = "Spherical area of a Voronoi cell" ;
	double areaTriangle(nVertices) ;
		areaTriangle:units = "m^2" ;
		areaTriangle:long_name = "Spherical area of a Delaunay triangle" ;
	int cellsOnCell(nCells, maxEdges) ;
		cellsOnCell:units = "-" ;
		cellsOnCell:long_name = "IDs of cells neighboring a cell" ;
	int verticesOnCell(nCells, maxEdges) ;
		verticesOnCell:units = "-" ;
		verticesOnCell:long_name = "IDs of vertices (corner points) of a cell" ;
	int verticesOnEdge(nEdges, TWO) ;
		verticesOnEdge:units = "-" ;
		verticesOnEdge:long_name = "IDs of the two vertex endpoints of an edge" ;
	int edgesOnVertex(nVertices, vertexDegree) ;
		edgesOnVertex:units = "-" ;
		edgesOnVertex:long_name = "IDs of the edges that meet at a vertex" ;
	int cellsOnVertex(nVertices, vertexDegree) ;
		cellsOnVertex:units = "-" ;
		cellsOnVertex:long_name = "IDs of the cells that meet at a vertex" ;
	double kiteAreasOnVertex(nVertices, vertexDegree) ;
		kiteAreasOnVertex:units = "m^2" ;
		kiteAreasOnVertex:long_name = "Intersection areas between primal (Voronoi) and dual (triangular) mesh cells" ;
	double meshDensity(nCells) ;
		meshDensity:units = "unitless" ;
		meshDensity:long_name = "Mesh density function (used when generating the mesh) evaluated at a cell" ;
	double zgrid(nCells, nVertLevelsP1) ;
		zgrid:units = "m MSL" ;
		zgrid:long_name = "Geometric height of layer interfaces" ;
	double fzm(nVertLevels) ;
		fzm:units = "unitless" ;
		fzm:long_name = "Weight for linear interpolation to w(k) point for u(k) level variable" ;
	double fzp(nVertLevels) ;
		fzp:units = "unitless" ;
		fzp:long_name = "Weight for linear interpolation to w(k) point for u(k-1) level variable" ;
	double zz(nCells, nVertLevels) ;
		zz:units = "unitless" ;
		zz:long_name = "d(zeta)/dz, vertical metric term" ;
	char initial_time(StrLen) ;
		initial_time:units = "YYYY-MM-DD_hh:mm:ss" ;
		initial_time:long_name = "Model initialization time" ;
	char xtime(Time, StrLen) ;
		xtime:units = "YYYY-MM-DD_hh:mm:ss" ;
		xtime:long_name = "Model valid time" ;
	double u(Time, nEdges, nVertLevels) ;
		u:units = "m s^{-1}" ;
		u:long_name = "Horizontal normal velocity at edges" ;
	double w(Time, nCells, nVertLevelsP1) ;
		w:units = "m s^{-1}" ;
		w:long_name = "Vertical velocity at vertical cell faces" ;
	double pressure(Time, nCells, nVertLevels) ;
		pressure:units = "Pa" ;
		pressure:long_name = "Pressure" ;
	double surface_pressure(Time, nCells) ;
		surface_pressure:units = "Pa" ;
		surface_pressure:long_name = "Diagnosed surface pressure" ;
	double rho(Time, nCells, nVertLevels) ;
		rho:units = "kg m^{-3}" ;
		rho:long_name = "Dry air density" ;
	double theta(Time, nCells, nVertLevels) ;
		theta:units = "K" ;
		theta:long_name = "Potential temperature" ;
	double relhum(Time, nCells, nVertLevels) ;
		relhum:units = "percent" ;
		relhum:long_name = "Relative humidity" ;
	double divergence(Time, nCells, nVertLevels) ;
		divergence:units = "s^{-1}" ;
		divergence:long_name = "Horizontal velocity divergence at cell center" ;
	double vorticity(Time, nVertices, nVertLevels) ;
		vorticity:units = "s^{-1}" ;
		vorticity:long_name = "Relative vorticity at vertices" ;
	double ke(Time, nCells, nVertLevels) ;
		ke:units = "m^2 s^{-2}" ;
		ke:long_name = "Kinetic energy at a cell center" ;
	double uReconstructZonal(Time, nCells, nVertLevels) ;
		uReconstructZonal:units = "m s^{-1}" ;
		uReconstructZonal:long_name = "Zonal component of reconstructed horizontal velocity at cell centers" ;
	double uReconstructMeridional(Time, nCells, nVertLevels) ;
		uReconstructMeridional:units = "m s^{-1}" ;
		uReconstructMeridional:long_name = "Meridional component of reconstructed horizontal velocity at cell centers" ;
	double ertel_pv(Time, nCells, nVertLevels) ;
		ertel_pv:units = "PVU" ;
		ertel_pv:long_name = "Ertel\'s potential vorticity" ;
	double u_pv(Time, nCells) ;
		u_pv:units = "m s^{-1}" ;
		u_pv:long_name = "Zonal wind on dynamic tropopause" ;
	double v_pv(Time, nCells) ;
		v_pv:units = "m s^{-1}" ;
		v_pv:long_name = "Meridional wind on dynamic tropopause" ;
	double theta_pv(Time, nCells) ;
		theta_pv:units = "K" ;
		theta_pv:long_name = "Potential temperature on dynamic tropopause" ;
	double vort_pv(Time, nCells) ;
		vort_pv:units = "s^{-1}" ;
		vort_pv:long_name = "Relative vertical vorticity on dynamic tropopause" ;
	double depv_dt_lw(Time, nCells, nVertLevels) ;
		depv_dt_lw:units = "PVU s^{-1}" ;
		depv_dt_lw:long_name = "Diabatic EPV tendency from longwave radiation" ;
	double depv_dt_sw(Time, nCells, nVertLevels) ;
		depv_dt_sw:units = "PVU s^{-1}" ;
		depv_dt_sw:long_name = "Diabatic EPV tendency from shortwave radiation" ;
	double depv_dt_bl(Time, nCells, nVertLevels) ;
		depv_dt_bl:units = "PVU s^{-1}" ;
		depv_dt_bl:long_name = "Diabatic EPV tendency from PBL" ;
	double depv_dt_cu(Time, nCells, nVertLevels) ;
		depv_dt_cu:units = "PVU s^{-1}" ;
		depv_dt_cu:long_name = "Diabatic EPV tendency from convection" ;
	double depv_dt_mix(Time, nCells, nVertLevels) ;
		depv_dt_mix:units = "PVU s^{-1}" ;
		depv_dt_mix:long_name = "Diabatic EPV tendency from explicit numerical mixing" ;
	double dtheta_dt_mp(Time, nCells, nVertLevels) ;
		dtheta_dt_mp:units = "K s^{-1}" ;
		dtheta_dt_mp:long_name = "Potential temperature heating rate from microphysics" ;
	double depv_dt_mp(Time, nCells, nVertLevels) ;
		depv_dt_mp:units = "PVU s^{-1}" ;
		depv_dt_mp:long_name = "Diabatic EPV tendency from microphysics" ;
	double depv_dt_diab(Time, nCells, nVertLevels) ;
		depv_dt_diab:units = "PVU s^{-1}" ;
		depv_dt_diab:long_name = "Sum of calculated EPV tendencies from diabatic processes" ;
	double depv_dt_fric(Time, nCells, nVertLevels) ;
		depv_dt_fric:units = "PVU s^{-1}" ;
		depv_dt_fric:long_name = "Sum of calculated EPV tendencies from frictional processes" ;
	double depv_dt_diab_pv(Time, nCells) ;
		depv_dt_diab_pv:units = "PVU s^{-1}" ;
		depv_dt_diab_pv:long_name = "Diabatic EPV tendency on dynamic tropopause" ;
	double depv_dt_fric_pv(Time, nCells) ;
		depv_dt_fric_pv:units = "PVU s^{-1}" ;
		depv_dt_fric_pv:long_name = "Frictional EPV tendency on dynamic tropopause" ;
	int iLev_DT(Time, nCells) ;
		iLev_DT:units = "-" ;
		iLev_DT:long_name = "Lowest vertical level at or above dynamic tropopause (.lt.1 if 2 PVU below column; .gt.nLevels if 2PVU above column)" ;
	int i_rainnc(Time, nCells) ;
		i_rainnc:units = "unitless" ;
		i_rainnc:long_name = "incidence of accumulated grid-scale precipitation greater than config_bucket_rainnc" ;
	double rainnc(Time, nCells) ;
		rainnc:units = "mm" ;
		rainnc:long_name = "accumulated total grid-scale precipitation" ;
	double precipw(Time, nCells) ;
		precipw:units = "kg m^{-2}" ;
		precipw:long_name = "precipitable water" ;
	double cuprec(Time, nCells) ;
		cuprec:units = "mm s^{-1}" ;
		cuprec:long_name = "convective precipitation rate" ;
	int i_rainc(Time, nCells) ;
		i_rainc:units = "unitless" ;
		i_rainc:long_name = "incidence of accumulated convective precipitation greater than config_bucket_rainc" ;
	double rainc(Time, nCells) ;
		rainc:units = "mm" ;
		rainc:long_name = "accumulated convective precipitation" ;
	int kpbl(Time, nCells) ;
		kpbl:units = "unitless" ;
		kpbl:long_name = "index level of PBL top" ;
	double hpbl(Time, nCells) ;
		hpbl:units = "m" ;
		hpbl:long_name = "Planetary Boundary Layer (PBL) height" ;
	double hfx(Time, nCells) ;
		hfx:units = "W m^{-2}" ;
		hfx:long_name = "upward heat flux at the surface" ;
	double qfx(Time, nCells) ;
		qfx:units = "kg m^{-2} s^{-1}" ;
		qfx:long_name = "upward moisture flux at the surface" ;
	double cd(Time, nCells) ;
		cd:units = "unitless" ;
		cd:long_name = "drag coefficient at 10-meter" ;
	double cda(Time, nCells) ;
		cda:units = "unitless" ;
		cda:long_name = "drag coefficient at lowest model level" ;
	double ck(Time, nCells) ;
		ck:units = "unitless" ;
		ck:long_name = "enthalpy exchange coeff at 10-meter" ;
	double cka(Time, nCells) ;
		cka:units = "unitless" ;
		cka:long_name = "enthalpy exchange coefficient at lowest model level" ;
	double lh(Time, nCells) ;
		lh:units = "W m^{-2}" ;
		lh:long_name = "latent heat flux at the surface" ;
	double u10(Time, nCells) ;
		u10:units = "m s^{-1}" ;
		u10:long_name = "10-meter zonal wind" ;
	double v10(Time, nCells) ;
		v10:units = "m s^{-1}" ;
		v10:long_name = "10-meter meridional wind" ;
	double q2(Time, nCells) ;
		q2:units = "kg kg^{-1}" ;
		q2:long_name = "2-meter specific humidity" ;
	double t2m(Time, nCells) ;
		t2m:units = "K" ;
		t2m:long_name = "2-meter temperature" ;
	double th2m(Time, nCells) ;
		th2m:units = "K" ;
		th2m:long_name = "2-meter potential temperature" ;
	double gsw(Time, nCells) ;
		gsw:units = "W m^{-2}" ;
		gsw:long_name = "net surface shortwave radiation flux" ;
	double glw(Time, nCells) ;
		glw:units = "W m^{-2}" ;
		glw:long_name = "all-sky downward surface longwave radiation" ;
	double acsnow(Time, nCells) ;
		acsnow:units = "kg m^{-2}" ;
		acsnow:long_name = "accumulated snow" ;
	double pin(nOznLevels) ;
		pin:units = "Pa" ;
		pin:long_name = "fixed pressure levels at which climatological ozone is defined" ;
	double ozmixm(nCells, nOznLevels, nMonths) ;
		ozmixm:units = "mol mol^{-1}" ;
		ozmixm:long_name = "monthly-mean climatological ozone defined at fixed pressure levels" ;
	char mminlu(StrLen) ;
		mminlu:units = "unitless" ;
		mminlu:long_name = "land use classification" ;
	int isice_lu ;
		isice_lu:units = "unitless" ;
		isice_lu:long_name = "Index category for snow/ice" ;
	int iswater_lu ;
		iswater_lu:units = "unitless" ;
		iswater_lu:long_name = "Index category for water" ;
	double xland(Time, nCells) ;
		xland:units = "unitless" ;
		xland:long_name = "land-ocean mask (1=land including sea-ice ; 2=ocean)" ;
	double skintemp(Time, nCells) ;
		skintemp:units = "K" ;
		skintemp:long_name = "ground or water surface temperature" ;
	double snow(Time, nCells) ;
		snow:units = "kg m^{-2}" ;
		snow:long_name = "snow water equivalent" ;
	double snowh(Time, nCells) ;
		snowh:units = "m" ;
		snowh:long_name = "physical snow depth" ;
	double sst(Time, nCells) ;
		sst:units = "K" ;
		sst:long_name = "sea-surface temperature" ;
	double vegfra(Time, nCells) ;
		vegfra:units = "unitless" ;
		vegfra:long_name = "vegetation fraction" ;
	double xice(Time, nCells) ;
		xice:units = "unitless" ;
		xice:long_name = "fractional area coverage of sea-ice" ;
	double sh2o(Time, nCells, nSoilLevels) ;
		sh2o:units = "m3 m^{-3}" ;
		sh2o:long_name = "soil equivalent liquid water" ;
	double smois(Time, nCells, nSoilLevels) ;
		smois:units = "m3 m^{-3}" ;
		smois:long_name = "soil moisture" ;
	double tslb(Time, nCells, nSoilLevels) ;
		tslb:units = "K" ;
		tslb:long_name = "soil layer temperature" ;

// global attributes:
		:model_name = "mpas" ;
		:core_name = "atmosphere" ;
		:source = "MPAS" ;
		:Conventions = "MPAS" ;
		:git_version = "unknown" ;
		:on_a_sphere = "YES" ;
		:sphere_radius = 6371229. ;
		:is_periodic = "NO" ;
		:x_period = 0. ;
		:y_period = 0. ;
		:history = "mpirun -n 256 ./atmosphere_model" ;
		:parent_id = "w3p5dgmqdk\n",
			"4nrlb7y44f\n",
			"" ;
		:mesh_spec = "0.0" ;
		:config_time_integration = "SRK3" ;
		:config_time_integration_order = 3 ;
		:config_dt = 120. ;
		:config_calendar_type = "gregorian" ;
		:config_start_time = "1998-04-01_00:00:00" ;
		:config_stop_time = "none" ;
		:config_run_duration = "153_00:00:00" ;
		:config_split_dynamics_transport = "YES" ;
		:config_number_of_sub_steps = 2 ;
		:config_dynamics_split_steps = 3 ;
		:config_h_mom_eddy_visc2 = 0. ;
		:config_h_mom_eddy_visc4 = 0. ;
		:config_v_mom_eddy_visc2 = 0. ;
		:config_h_theta_eddy_visc2 = 0. ;
		:config_h_theta_eddy_visc4 = 0. ;
		:config_v_theta_eddy_visc2 = 0. ;
		:config_horiz_mixing = "2d_smagorinsky" ;
		:config_len_disp = 25000. ;
		:config_visc4_2dsmag = 0.05 ;
		:config_del4u_div_factor = 10. ;
		:config_w_adv_order = 3 ;
		:config_theta_adv_order = 3 ;
		:config_scalar_adv_order = 3 ;
		:config_u_vadv_order = 3 ;
		:config_w_vadv_order = 3 ;
		:config_theta_vadv_order = 3 ;
		:config_scalar_vadv_order = 3 ;
		:config_scalar_advection = "YES" ;
		:config_positive_definite = "NO" ;
		:config_monotonic = "YES" ;
		:config_coef_3rd_order = 0.25 ;
		:config_smagorinsky_coef = 0.125 ;
		:config_mix_full = "YES" ;
		:config_epssm = 0.1 ;
		:config_smdiv = 0.1 ;
		:config_apvm_upwinding = 0.5 ;
		:config_h_ScaleWithMesh = "YES" ;
		:config_num_halos = 2 ;
		:config_zd = 22000. ;
		:config_xnutr = 0.2 ;
		:config_mpas_cam_coef = 0. ;
		:config_rayleigh_damp_u = "NO" ;
		:config_rayleigh_damp_u_timescale_days = 5. ;
		:config_number_rayleigh_damp_u_levels = 6 ;
		:config_apply_lbcs = "NO" ;
		:config_restart_timestamp_name = "restart_timestamp" ;
		:config_pio_num_iotasks = 0 ;
		:config_pio_stride = 1 ;
		:config_block_decomp_file_prefix = "/scratchc/jptang/MPAS/VR/92-25km_VR_1998/x4.163842.graph.info.part." ;
		:config_number_of_blocks = 0 ;
		:config_explicit_proc_decomp = "NO" ;
		:config_proc_decomp_file_prefix = "graph.info.part." ;
		:config_do_restart = "NO" ;
		:config_do_DAcycling = "NO" ;
		:config_print_global_minmax_vel = "YES" ;
		:config_print_detailed_minmax_vel = "NO" ;
		:config_print_global_minmax_sca = "NO" ;
		:config_IAU_option = "off" ;
		:config_IAU_window_length_s = 21600. ;
		:config_jedi_da = "NO" ;
		:input_soil_data = "STAS" ;
		:input_soil_temperature_lag = 140 ;
		:num_soil_layers = 4 ;
		:months = 12 ;
		:noznlev = 59 ;
		:naerlev = 29 ;
		:camdim1 = 4 ;
		:config_frac_seaice = "YES" ;
		:config_sfc_albedo = "YES" ;
		:config_sfc_snowalbedo = "YES" ;
		:config_sst_update = "YES" ;
		:config_sstdiurn_update = "YES" ;
		:config_deepsoiltemp_update = "NO" ;
		:config_o3climatology = "YES" ;
		:config_microp_re = "NO" ;
		:config_ysu_pblmix = "NO" ;
		:config_n_microp = 1 ;
		:config_radtlw_interval = "01:00:00" ;
		:config_radtsw_interval = "01:00:00" ;
		:config_conv_interval = "none" ;
		:config_pbl_interval = "none" ;
		:config_camrad_abs_update = "06:00:00" ;
		:config_greeness_update = "24:00:00" ;
		:config_bucket_update = "none" ;
		:config_physics_suite = "mesoscale_reference" ;
		:config_microp_scheme = "mp_wsm6" ;
		:config_convection_scheme = "cu_ntiedtke" ;
		:config_lsm_scheme = "noah" ;
		:config_pbl_scheme = "bl_ysu" ;
		:config_gwdo_scheme = "bl_ysu_gwdo" ;
		:config_radt_cld_scheme = "cld_fraction" ;
		:config_radt_lw_scheme = "rrtmg_lw" ;
		:config_radt_sw_scheme = "rrtmg_sw" ;
		:config_sfclayer_scheme = "sf_monin_obukhov" ;
		:config_gfconv_closure_deep = 0 ;
		:config_gfconv_closure_shallow = 8 ;
		:config_bucket_radt = 1000000000. ;
		:config_bucket_rainc = 100. ;
		:config_bucket_rainnc = 100. ;
		:config_oml1d = "NO" ;
		:config_oml_hml0 = 30. ;
		:config_oml_gamma = 0.14 ;
		:config_oml_relaxation_time = 864000. ;
		:config_sounding_interval = "none" ;
		:file_id = "glzbesmh2m" ;
}
